import Context from '@app/app/context';
import DiscoveryService from '@app/services/discovery.service';
import { BotcmdCommand, BotcmdView, CommandView } from '@henta/botcmd';
import { Service } from 'typedi';

@Service()
@BotcmdView({ name: '–ø–æ–∏—Å–∫', aliases: ['—Å–∫–∞–Ω', 'discover', 'scan'] })
export default class DiscoverView extends CommandView {
  public constructor(private readonly discoveryService: DiscoveryService) {
    super();
  }

  @BotcmdCommand()
  public async handler(ctx: Context) {
    await ctx.answer({
      text: 'üîé –ò–∑—É—á–∞—é –≤–∞—à—É –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ONVIF —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...',
    });

    const cameras = await this.discoveryService.discover();
    if (cameras.length === 0) {
      await ctx.answer({
        text: 'üíî –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ ONVIF —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏ —Å –Ω–∏–º–∏ –∏ —á—Ç–æ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å–µ—Ç—å. –¢–∞–∫–∂–µ –∏–Ω–æ–≥–¥–∞ –∫–∞–º–µ—Ä—ã –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª, —Ç–æ–≥–¥–∞ —ç—Ç–æ –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—É–∫–∞–º–µ—Ä—ã –≤ –∏—Ç–æ–≥–µ..',
      });

      return;
    }

    await ctx.answer({
      text: [
        'üíì –ù–∞—à–µ–ª –≤–æ—Ç —Ç–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:',
        ...cameras.map(
          (v) =>
            `${v.hostname}:${v.port} (${v.activeSource.width}x${v.activeSource.height}, ${v.activeSource.fps} fps)`,
        ),
        '',
        'üí° –ù–∞–ø–∏—à–∏—Ç–µ /info ip:port –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ–º–∞—Ü–∏–∏ –æ –∫–∞–º–µ—Ä–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ–π',
      ].join('\n'),
    });
  }
}
